{"version":3,"sources":["image-info.js","gif2asvg.js"],"names":["_classCallCheck","instance","Constructor","TypeError","global","ImageInfo","isNode","window","module","exports","createImageData","width","height","U8A","Uint8ClampedArray","Uint8Array","imageData","data","ctx","document","createElement","getContext","fromGifReader","gifReader","frames","i","numFrames","frameInfo","frame","data_length","data_offset","delay","disposal","has_local_palette","interlaced","palette_offset","transparent_index","x","y","decodeAndBlitFrameRGBA","loopCount","_createClass","defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","omggif","require","GifWriter","GifReader","btoa","str","buffer","Buffer","toString","gif2asvg","this","q","value","dataUri","base64Marker","base64Index","indexOf","base64","substring","raw","atob","rawLength","array","ArrayBuffer","charCodeAt","binaryData","slice","CHUNK_SIZE","index","result","subarray","Math","min","String","fromCharCode","apply","svg","svgMarkup","svgWidth","svgHeight","svgOpen","svgClose","base64ImageData","smilSvgAnimationFromImageDataGif","convertDataURIToBinary","gr","imageInfo","smilSvgAnimationFromImageDataFramesGif","canvas","putImageData","toDataURL","PNG","png","pngImageData","sync","write","pngDataUri","convertBinaryToBase64","_encodeImageDataToPngNodeJs","_encodeImageDataToPngCanvas","imageIndex","setTags","pngImageDataUri","encodeImageDataToPng","imageId","generateImageId","imgTag","setTagId","generateAnimationId","begin","setTag","wrapInSvgHeader"],"mappings":"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","file":"gif2asvg.full.min.js","sourcesContent":["'use strict';\n\n(function (global) {\n    'use strict';\n\n    var ImageInfo = {};\n    ImageInfo.isNode = typeof window === 'undefined';\n\n    if (ImageInfo.isNode) {\n        module.exports = ImageInfo;\n    } else {\n        global.ImageInfo = ImageInfo;\n    }\n\n    ImageInfo.createImageData = function (width, height) {\n        if (ImageInfo.isNode) {\n            // ReSharper disable once InconsistentNaming\n            var U8A = Uint8ClampedArray || Uint8Array;\n            var imageData = { width: width, height: height };\n            imageData.data = new U8A(width * height * 4);\n            return imageData;\n        }\n\n        var ctx = window.document.createElement('canvas').getContext('2d');\n        return ctx.createImageData(width, height);\n    };\n\n    ImageInfo.fromGifReader = function (gifReader) {\n        var imageData = ImageInfo.createImageData(gifReader.width, gifReader.height);\n\n        imageData.frames = [];\n\n        for (var i = 0; i < gifReader.numFrames(); i++) {\n            var frameInfo = gifReader.frameInfo(i);\n\n            var width = frameInfo.width;\n            var height = frameInfo.height;\n            var frame = ImageInfo.createImageData(width, height);\n\n            frame.data_length = frameInfo.data_length;\n            frame.data_offset = frameInfo.data_offset;\n            frame.delay = frameInfo.delay;\n            frame.disposal = frameInfo.disposal;\n            frame.has_local_palette = frameInfo.has_local_palette;\n            frame.interlaced = frameInfo.interlaced;\n            frame.palette_offset = frameInfo.palette_offset;\n            frame.transparent_index = frameInfo.transparent_index;\n            frame.x = frameInfo.x;\n            frame.y = frameInfo.y;\n            gifReader.decodeAndBlitFrameRGBA(i, frame.data);\n            imageData.frames[i] = frame;\n\n            if (frame.delay) {\n                frame.delay = frame.delay * 10; // bugfix\n            }\n        }\n\n        imageData.loopCount = gifReader.loopCount();\n        if (!imageData.loopCount) {\n            imageData.loopCount = -1;\n        }\n\n        return imageData;\n    };\n})(typeof window === 'undefined' ? global : window);\n//# sourceMappingURL=image-info.js.map\n","'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n(function (global) {\n    'use strict';\n\n    global.isNode = typeof window === 'undefined';\n\n    var omggif;\n    var ImageInfo;\n    if (global.isNode) {\n        omggif = require('omggif');\n        ImageInfo = require('./image-info');\n    } else {\n        omggif = { GifWriter: global.GifWriter, GifReader: global.GifReader };\n        ImageInfo = global.ImageInfo;\n    }\n\n    if (global.isNode && typeof btoa === 'undefined') {\n        global.btoa = function (str) {\n            var buffer;\n\n            if (str instanceof Buffer) {\n                buffer = str;\n            } else {\n                buffer = new Buffer(str.toString(), 'binary');\n            }\n\n            return buffer.toString('base64');\n        };\n    }\n\n    var gif2asvg = function () {\n        function gif2asvg() {\n            _classCallCheck(this, gif2asvg);\n\n            this.isNode = typeof window === 'undefined';\n            this.q = q;\n        }\n\n        _createClass(gif2asvg, [{\n            key: 'convertDataURIToBinary',\n            value: function convertDataURIToBinary(dataUri) {\n                var base64Marker = ';base64,';\n\n                var base64Index = dataUri.indexOf(base64Marker) + base64Marker.length;\n                var base64 = dataUri.substring(base64Index);\n                var raw = window.atob(base64);\n                var rawLength = raw.length;\n                var array = new Uint8Array(new ArrayBuffer(rawLength));\n\n                for (var i = 0; i < rawLength; i++) {\n                    array[i] = raw.charCodeAt(i);\n                }\n                return array;\n            }\n        }, {\n            key: 'convertBinaryToBase64',\n            value: function convertBinaryToBase64(binaryData) {\n                var CHUNK_SIZE = 0x8000; //arbitrary number\n                var index = 0;\n                var length = binaryData.length;\n                var result = '';\n                var slice;\n                while (index < length) {\n                    slice = binaryData.subarray(index, Math.min(index + CHUNK_SIZE, length));\n                    result += String.fromCharCode.apply(null, slice);\n                    index += CHUNK_SIZE;\n                }\n                return btoa(result);\n            }\n        }, {\n            key: 'encodeSvgAsBase64',\n            value: function encodeSvgAsBase64(svg) {\n                return 'data:image/svg+xml;base64,' + btoa(svg);\n            }\n        }, {\n            key: 'wrapInSvgHeader',\n            value: function wrapInSvgHeader(svgMarkup, svgWidth, svgHeight) {\n                var q = this.q;\n                var svgOpen = '<svg xmlns=' + q + 'http://www.w3.org/2000/svg' + q + ' xmlns:A=' + q + 'http://www.w3.org/1999/xlink' + q + ' width=' + q + svgWidth + q + ' height=' + q + svgHeight + q + '>';\n                var svgClose = '</svg>';\n                return svgOpen + svgMarkup + svgClose;\n            }\n        }, {\n            key: 'smilSvgAnimationFromBase64Gif',\n            value: function smilSvgAnimationFromBase64Gif(base64ImageData) {\n                return this.smilSvgAnimationFromImageDataGif(this.convertDataURIToBinary(base64ImageData));\n            }\n        }, {\n            key: 'smilSvgAnimationFromImageDataGif',\n            value: function smilSvgAnimationFromImageDataGif(imageData) {\n                var gr = new omggif.GifReader(imageData);\n                var imageInfo = ImageInfo.fromGifReader(gr);\n                return this.smilSvgAnimationFromImageDataFramesGif(imageInfo);\n            }\n        }, {\n            key: '_encodeImageDataToPngCanvas',\n            value: function _encodeImageDataToPngCanvas(imageData) {\n                var canvas = window.document.createElement('canvas');\n                canvas.width = imageData.width;\n                canvas.height = imageData.height;\n                var ctx = canvas.getContext('2d');\n                ctx.putImageData(imageData, 0, 0);\n                return canvas.toDataURL('image/png');\n            }\n        }, {\n            key: '_encodeImageDataToPngNodeJs',\n            value: function _encodeImageDataToPngNodeJs(imageData) {\n                var PNG = require('pngjs').PNG;\n\n                var png = new PNG();\n                png.width = imageData.width;\n                png.height = imageData.height;\n\n                png.data = new Buffer(imageData.data);\n                var pngImageData = PNG.sync.write(png);\n                var pngDataUri = 'data:image/png;base64,' + this.convertBinaryToBase64(pngImageData);\n                return pngDataUri;\n            }\n        }, {\n            key: 'encodeImageDataToPng',\n            value: function encodeImageDataToPng(imageData) {\n                if (global.isNode) {\n                    return this._encodeImageDataToPngNodeJs(imageData);\n                }\n                return this._encodeImageDataToPngCanvas(imageData);\n            }\n        }, {\n            key: 'generateImageId',\n            value: function generateImageId(imageData, imageIndex) {\n                return 'F' + imageIndex;\n            }\n        }, {\n            key: 'generateAnimationId',\n            value: function generateAnimationId(imageData, imageIndex) {\n                return 'A' + imageIndex;\n            }\n        }, {\n            key: 'smilSvgAnimationFromImageDataFramesGif',\n            value: function smilSvgAnimationFromImageDataFramesGif(imageData) {\n                var q = this.q;\n                var svg = '';\n                var setTags = '';\n                for (var i = 0; i < imageData.frames.length; i++) {\n                    var frame = imageData.frames[i];\n\n                    var pngImageDataUri = this.encodeImageDataToPng(frame);\n\n                    var imageId = this.generateImageId(imageData, i);\n                    var imgTag = '<image id=' + q + imageId + q + ' height=' + q + '100%' + q + ' width=' + q + '0' + q + ' A:href=' + q + pngImageDataUri + q + '/>';\n\n                    var setTagId = this.generateAnimationId(imageData, i);\n                    var begin = '';\n                    if (i === 0) {\n                        begin += this.generateAnimationId(imageData, imageData.frames.length - 1) + '.end; 0s';\n                    } else {\n                        begin += this.generateAnimationId(imageData, i - 1) + '.end;';\n                    }\n\n                    var setTag = '<set id=' + q + setTagId + q + ' A:href=' + q + '#' + imageId + q + ' attributeName=' + q + 'width' + q + ' to=' + q + '100%' + q + ' dur=' + q + frame.delay + 'ms' + q + ' begin=' + q + begin + q + '/>';\n                    setTags += setTag;\n                    svg += imgTag;\n                }\n\n                svg += setTags;\n\n                svg = this.wrapInSvgHeader(svg, imageData.width, imageData.height);\n                return svg;\n            }\n        }]);\n\n        return gif2asvg;\n    }();\n\n    // ReSharper disable once JsUnreachableCode\n\n    if (global.isNode) {\n        module.exports = gif2asvg;\n    } else {\n        global.gif2asvg = gif2asvg;\n    }\n})(typeof window === 'undefined' ? global : window);\n//# sourceMappingURL=gif2asvg.js.map\n"],"sourceRoot":"/source/"}